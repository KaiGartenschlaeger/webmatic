import groovy.time.TimeCategory
import java.text.*
import mdz.ccuhistorian.Database

if (webServer.apiKeys)
    if (!params.k || !webServer.apiKeys.contains(params.k))
	throw new Exception('Access denied')	

// Aufrufparameter auswerten
if (!params.i)
    throw new Exception('Page parameter i (data point id) not set or invalid')

def begin = utils.parseDate(params.b)
def duration = utils.parseDuration(params.d)
def end = utils.parseDate(params.e)
use (TimeCategory) {
    if (!begin) { 
	if (!end) end = new Date()
	if (!duration) begin = end - 1
	else begin = end - duration
    } else { 
	if (!end) {
            if (!duration) end = new Date()
            else end = begin + duration
        }	
    }	
}
def sb = new StringBuilder()

def searchList = params.i.split(",")
def first = true
sb << 'historian_callback('
for(String id: searchList){
    if(first){
        first = false
    }else{
        sb << ","
    }
    def dpId = id as Integer
    // Zeitreihe abfragen
    def dataPoint = database.getDataPoint(dpId)
    if (dataPoint){
        def timeSeries
        if (database.isOfTypeString(dataPoint))
            timeSeries = database.getTimeSeriesRaw(dataPoint, begin, end)
        else
            timeSeries = database.getTimeSeries(dataPoint, begin, end)

        // JSON erstellen
        def dateFormat = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
        def displayName = (dataPoint.attributes.displayName?:dataPoint.id.address) + '.' + dataPoint.id.identifier        

        def valueFormatter
        if (database.isOfTypeString(dataPoint)) {
            valueFormatter = { '"' + it.tr('"', '""') + '"' }
        } else {
            def numberFormat = new DecimalFormat('#,##0.###')
            valueFormatter = { numberFormat.format(it.value) }
        }
        
        def comma = true
        sb << '['
        timeSeries.each {
            if(comma){
                comma = false
            }else{
                sb << ","
            }
            sb << '["' << dateFormat.format(it.timestamp) << '",' << valueFormatter(it.value) << ']'
        }
        sb << ']'        
    }
}
sb << ');'

// CSV-Datei verschicken
response.contentType='text/plain'
out << sb